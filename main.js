(()=>{"use strict";function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var t=function(){function t(e,n){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),this._settings=e,this._formElement=n,this._inputList=Array.from(this._formElement.querySelectorAll(this._settings.inputSelector)),this._buttonElement=this._formElement.querySelector(this._settings.submitButtonSelector)}var n,r;return n=t,(r=[{key:"_showInputError",value:function(e){var t=this._formElement.querySelector(".".concat(e.id,"-error"));t.textContent=e.validationMessage,t.classList.add(this._settings.errorClass),e.classList.add(this._settings.inputErrorClass)}},{key:"_hideInputError",value:function(e){var t=this._formElement.querySelector(".".concat(e.id,"-error"));t.textContent="",t.classList.remove(this._settings.errorClass),e.classList.remove(this._settings.inputErrorClass)}},{key:"_checkInputValidity",value:function(e){e.validity.valid?this._hideInputError(e):this._showInputError(e)}},{key:"_hasInvalidInput",value:function(){return this._inputList.some((function(e){return!e.validity.valid}))}},{key:"_toggleButtonState",value:function(){this._hasInvalidInput()?(this._buttonElement.classList.add(this._settings.inactiveButtonClass),this._buttonElement.disabled=!0):(this._buttonElement.classList.remove(this._settings.inactiveButtonClass),this._buttonElement.disabled=!1)}},{key:"_setEventListeners",value:function(){var e=this;this._inputList.forEach((function(t){t.addEventListener("input",(function(){e._checkInputValidity(t),e._toggleButtonState()}))}))}},{key:"resetValidation",value:function(){var e=this;this._inputList.forEach((function(t){e._hideInputError(t)})),this._toggleButtonState()}},{key:"enableValidation",value:function(){this._setEventListeners()}}])&&e(n.prototype,r),t}(),n=".popup__close-button",r=".popup__submit-button",o="popup_open",i=document.querySelector(".profile__edit-button"),a=document.querySelector(".profile__add-button"),s=document.querySelector(".profile__avatar"),u=document.querySelector("#profile-name-input"),c=document.querySelector("#profile-about-input"),l=document.querySelector(".popup__form_type_profile"),f=document.querySelector(".popup__form_type_avatar"),h=document.querySelector(".popup__form_type_add-card"),p=(document.querySelector(".popup_type_image-preview"),document.querySelector(".popup__figure-image")),_=document.querySelector(".popup__figure-caption"),d={formSelector:".popup__form",fieldsetSelector:".popup__fieldset",inputSelector:".popup__input",submitButtonSelector:".popup__submit-button",inactiveButtonClass:"popup__submit-button_inactive",inputErrorClass:"popup__input_type_error",errorClass:"popup__input-error_active"};function m(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function v(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var y=function(){function e(t,n,r,o,i,a){var s=this,u=n.name,c=n.link,l=n.likes,f=n.ownerID;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),v(this,"_likeCard",(function(e){e.target.classList.toggle("card__like-button_active"),s._likesCountElement.textContent=s._likeStatus?"".concat(parseInt(s._likesCountElement.textContent)-1):"".concat(parseInt(s._likesCountElement.textContent)+1),s._likeStatus=!s._likeStatus,s._handleLikeClick(s._likeStatus)})),v(this,"_deleteCard",(function(){s._imageElement.removeEventListener("click",s._handleCardClick),s._likeButtonElement.removeEventListener("click",s._likeCard),s._deleteButtonElement.removeEventListener("click",s._deleteCard),s._cardNode.remove(),s._cardNode=null})),this._userID=t,this._name=u,this._link=c,this._likes=l,this._ownerID=f,this._templateSelector=r,this._handleCardClick=o,this._handleLikeClick=i,this._handleDeleteClick=a,this._updateLikeStatus(),this._createCardElement()}var t,n;return t=e,(n=[{key:"_getCardNode",value:function(){return document.querySelector(this._templateSelector).content.querySelector(".card").cloneNode(!0)}},{key:"_createCardElement",value:function(){this._cardNode=this._getCardNode(),this._imageElement=this._cardNode.querySelector(".card__image"),this._titleElement=this._cardNode.querySelector(".card__title"),this._likeButtonElement=this._cardNode.querySelector(".card__like-button"),this._likesCountElement=this._cardNode.querySelector(".card__likes-count"),this._deleteButtonElement=this._cardNode.querySelector(".card__delete-button"),this._ownerID===this._userID&&this._deleteButtonElement.classList.add("card__delete-button_enabled"),this._imageElement.src=this._link,this._imageElement.alt=this._name,this._titleElement.textContent=this._name,this._likesCountElement.textContent=this._likes.length,this._likeStatus&&this._likeButtonElement.classList.add("card__like-button_active"),this._setEventListeners()}},{key:"_setEventListeners",value:function(){var e=this;this._imageElement.addEventListener("click",this._handleCardClick),this._likeButtonElement.addEventListener("click",this._likeCard),this._deleteButtonElement.addEventListener("click",(function(){e._handleDeleteClick(e._deleteCard)}))}},{key:"_updateLikeStatus",value:function(){var e=this;this._likes.forEach((function(t){t._id===e._userID&&(e._likeStatus=!0)}))}},{key:"getElement",value:function(){return this._cardNode}}])&&m(t.prototype,n),e}();function b(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var k=function(){function e(t,n){var r=t.items,o=t.renderer;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._renderedItems=r,this._renderer=o,this._container=document.querySelector(n)}var t,n;return t=e,(n=[{key:"addItem",value:function(e){this._container.prepend(this._renderer(e))}},{key:"clear",value:function(){this._container.innerHTML=""}},{key:"renderItems",value:function(){var e=this;this.clear(),this._renderedItems.forEach((function(t){e.addItem(t)}))}}])&&b(t.prototype,n),e}();function E(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function g(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var C=function(){function e(t,n,r){var o=this;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),g(this,"_handleEscClose",(function(e){"Escape"===e.key&&o.close()})),g(this,"_handleOverlayClick",(function(e){e.target===e.currentTarget&&e.currentTarget.addEventListener("mouseup",(function(t){t.target===e.target&&o.close()}),{once:!0})})),this._popupElement=document.querySelector(t),this._popupOpenClass=n,this._popupCloseButtonSelector=r}var t,n;return t=e,(n=[{key:"open",value:function(){this._popupElement.addEventListener("mousedown",this._handleOverlayClick),document.addEventListener("keyup",this._handleEscClose),this._popupElement.classList.add(this._popupOpenClass)}},{key:"close",value:function(){this._popupElement.removeEventListener("mousedown",this._handleOverlayClick),document.removeEventListener("keyup",this._handleEscClose),this._popupElement.classList.remove(this._popupOpenClass)}},{key:"setEventListeners",value:function(){var e=this;this._popupElement.querySelector(this._popupCloseButtonSelector).addEventListener("click",(function(){e.close()}))}}])&&E(t.prototype,n),e}();function S(e){return S="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},S(e)}function w(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function L(){return L="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(e,t,n){var r=O(e,t);if(r){var o=Object.getOwnPropertyDescriptor(r,t);return o.get?o.get.call(arguments.length<3?e:n):o.value}},L.apply(this,arguments)}function O(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=q(e)););return e}function I(e,t){return I=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e},I(e,t)}function j(e,t){if(t&&("object"===S(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e)}function q(e){return q=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)},q(e)}var P=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&I(e,t)}(a,e);var t,n,r,o,i=(r=a,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=q(r);if(o){var n=q(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return j(this,e)});function a(e,t,n,r,o,s,u){var c;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,a),(c=i.call(this,e,n,r))._submitButton=c._popupElement.querySelector(t),c._submitButtonDefaultText=c._submitButton.textContent,c._submittingText=s,c._handleSubmitForm=u,c._form=c._popupElement.querySelector(o.formSelector),c._inputsList=Array.from(c._form.querySelectorAll(o.inputSelector)),c}return t=a,(n=[{key:"close",value:function(){this._form.reset(),this._submitButton.textContent=this._submitButtonDefaultText,L(q(a.prototype),"close",this).call(this)}},{key:"_getInputValues",value:function(){var e={};return this._inputsList.forEach((function(t){e[t.name]=t.value})),e}},{key:"setEventListeners",value:function(){var e=this;L(q(a.prototype),"setEventListeners",this).call(this),this._form.addEventListener("submit",(function(t){t.preventDefault(),e._submitButton.textContent=e._submittingText,e._handleSubmitForm(e._getInputValues()),e.close()}))}},{key:"setSubmitFormHandleFunction",value:function(e){this._handleSubmitForm=e}}])&&w(t.prototype,n),a}(C);function B(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var R=function(){function e(t){var n=t.nameSelector,r=t.jobSelector,o=t.avatarSelector;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._nameElement=document.querySelector(n),this._jobElement=document.querySelector(r),this._avatarElement=document.querySelector(o)}var t,n;return t=e,(n=[{key:"getUserInfo",value:function(){return{userName:this._nameElement.textContent,userJob:this._jobElement.textContent,userAvatarLink:this._avatarElement.src}}},{key:"getUserId",value:function(){return this._id}},{key:"setUserInfo",value:function(e,t){this._nameElement.textContent=e,this._jobElement.textContent=t}},{key:"setAvatar",value:function(e){this._avatarElement.src=e}},{key:"setUserId",value:function(e){this._id=e}}])&&B(t.prototype,n),e}();function T(e){return T="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},T(e)}function x(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function U(){return U="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(e,t,n){var r=D(e,t);if(r){var o=Object.getOwnPropertyDescriptor(r,t);return o.get?o.get.call(arguments.length<3?e:n):o.value}},U.apply(this,arguments)}function D(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=V(e)););return e}function N(e,t){return N=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e},N(e,t)}function A(e,t){if(t&&("object"===T(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e)}function V(e){return V=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)},V(e)}var F=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&N(e,t)}(a,e);var t,n,r,o,i=(r=a,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=V(r);if(o){var n=V(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return A(this,e)});function a(e,t,n,r,o){var s;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,a),(s=i.call(this,e,t,n))._figureImageElement=r,s._figureCaptionElement=o,s}return t=a,(n=[{key:"open",value:function(e){var t=e.name,n=e.link;this._figureImageElement.src=n,this._figureImageElement.alt=t,this._figureCaptionElement.textContent=t,U(V(a.prototype),"open",this).call(this)}}])&&x(t.prototype,n),a}(C);function H(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var J=function(){function e(t){var n=t.baseUrl,r=t.headers;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._baseUrl=n,this._headers=r}var t,n;return t=e,(n=[{key:"_checkRes",value:function(e){return e.ok?e.json():Promise.reject("Error: ".concat(e.status,"\n").concat(e.statusText))}},{key:"getCards",value:function(){return fetch("".concat(this._baseUrl,"/cards"),{headers:this._headers}).then(this._checkRes)}},{key:"addCard",value:function(e,t){return fetch("".concat(this._baseUrl,"/cards"),{method:"POST",headers:this._headers,body:JSON.stringify({name:e,link:t})}).then(this._checkRes)}},{key:"deleteCard",value:function(e){return fetch("".concat(this._baseUrl,"/cards/").concat(e),{method:"DELETE",headers:this._headers}).then(this._checkRes)}},{key:"getUser",value:function(){return fetch("".concat(this._baseUrl,"/users/me"),{headers:this._headers}).then(this._checkRes)}},{key:"setUser",value:function(e,t){return fetch("".concat(this._baseUrl,"/users/me"),{method:"PATCH",headers:this._headers,body:JSON.stringify({name:e,about:t})}).then(this._checkRes)}},{key:"setAvatarPicture",value:function(e){return fetch("".concat(this._baseUrl,"/users/me/avatar"),{method:"PATCH",headers:this._headers,body:JSON.stringify({avatar:e})}).then(this._checkRes)}},{key:"likeCard",value:function(e){return fetch("".concat(this._baseUrl,"/cards/likes/").concat(e),{method:"PUT",headers:this._headers}).then(this._checkRes)}},{key:"unlikeCard",value:function(e){return fetch("".concat(this._baseUrl,"/cards/likes/").concat(e),{method:"DELETE",headers:this._headers}).then(this._checkRes)}}])&&H(t.prototype,n),e}(),M=new t(d,l),z=new t(d,f),G=new t(d,h);M.enableValidation(),z.enableValidation(),G.enableValidation();var K=new J({baseUrl:"https://around.nomoreparties.co/v1/group-12",headers:{authorization:"8595ca8e-a8f6-4218-b31d-c12a79561de8","Content-Type":"application/json"}}),Q=new R({nameSelector:".profile__name",jobSelector:".profile__about",avatarSelector:".profile__avatar-image"}),W=new P(".popup_type_delete-card",r,o,n,d,"Deleting...",(function(){return console.log("Error: didn't find a submit function")}));W.setEventListeners();var X=new F(".popup_type_image-preview",o,n,p,_);function Y(e){console.log(e)}X.setEventListeners(),K.getUser().then((function(e){Q.setUserInfo(e.name,e.about),Q.setAvatar(e.avatar),Q.setUserId(e._id);var t=new P(".popup_type_profile",r,o,n,d,"Saving...",(function(e){K.setUser(e.name,e.about).then((function(){Q.setUserInfo(e.name,e.about)})).catch(Y)}));t.setEventListeners(),i.addEventListener("click",(function(){M.resetValidation();var e=Q.getUserInfo();u.value=e.userName,c.value=e.userJob,t.open()}));var l=new P(".popup_type_avatar",r,o,n,d,"Saving...",(function(e){K.setAvatarPicture(e["avatar-image-link"]).then((function(){Q.setAvatar(e["avatar-image-link"])})).catch(Y)}));l.setEventListeners(),s.addEventListener("click",(function(){z.resetValidation(),l.open()})),K.getCards().then((function(t){var i=new k({items:t.reverse(),renderer:function(t){return n={cardID:t._id,name:t.name,link:t.link,likes:t.likes,ownerID:t.owner._id},"#card-template",r=e._id,o=n.cardID,new y(r,{name:i=n.name,link:a=n.link,likes:n.likes,ownerID:n.ownerID},"#card-template",(function(){X.open({name:i,link:a})}),(function(e){e?K.likeCard(o).catch(Y):K.unlikeCard(o).catch(Y)}),(function(e){W.setSubmitFormHandleFunction((function(){K.deleteCard(o).then((function(){e()})).catch(Y)})),W.open()})).getElement();var n,r,o,i,a}},".cards");i.renderItems();var s=new P(".popup_type_add-card",r,o,n,d,"Creating...",(function(e){K.addCard(e["card-title"],e["card-image-link"]).then((function(e){i.addItem(e)})).catch(Y)}));s.setEventListeners(),a.addEventListener("click",(function(){G.resetValidation(),s.open()}))})).catch(Y)})).catch(Y)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,