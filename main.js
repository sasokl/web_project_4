(()=>{"use strict";function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var t=function(){function t(e,n){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),this._settings=e,this._formElement=n,this._inputList=Array.from(this._formElement.querySelectorAll(this._settings.inputSelector)),this._buttonElement=this._formElement.querySelector(this._settings.submitButtonSelector)}var n,r;return n=t,(r=[{key:"_showInputError",value:function(e){var t=this._formElement.querySelector(".".concat(e.id,"-error"));t.textContent=e.validationMessage,t.classList.add(this._settings.errorClass),e.classList.add(this._settings.inputErrorClass)}},{key:"_hideInputError",value:function(e){var t=this._formElement.querySelector(".".concat(e.id,"-error"));t.textContent="",t.classList.remove(this._settings.errorClass),e.classList.remove(this._settings.inputErrorClass)}},{key:"_checkInputValidity",value:function(e){e.validity.valid?this._hideInputError(e):this._showInputError(e)}},{key:"_hasInvalidInput",value:function(){return this._inputList.some((function(e){return!e.validity.valid}))}},{key:"_toggleButtonState",value:function(){this._hasInvalidInput()?(this._buttonElement.classList.add(this._settings.inactiveButtonClass),this._buttonElement.disabled=!0):(this._buttonElement.classList.remove(this._settings.inactiveButtonClass),this._buttonElement.disabled=!1)}},{key:"_setEventListeners",value:function(){var e=this;this._inputList.forEach((function(t){t.addEventListener("input",(function(){e._checkInputValidity(t),e._toggleButtonState()}))}))}},{key:"resetValidation",value:function(){var e=this;this._inputList.forEach((function(t){e._hideInputError(t)})),this._toggleButtonState()}},{key:"enableValidation",value:function(){this._setEventListeners()}}])&&e(n.prototype,r),t}(),n=".popup__close-button",r="popup_open",o=document.querySelector(".profile__edit-button"),i=(document.querySelector(".popup__close-button_type_profile"),document.querySelector(".profile__add-button")),u=(document.querySelector(".popup__close-button_type_add-card"),document.querySelector(".popup__close-button_type_image-preview"),document.querySelector("#profile-name-input")),a=document.querySelector("#profile-about-input"),c=document.querySelector(".popup__form_type_profile"),l=document.querySelector(".popup__form_type_add-card"),s=(document.querySelector(".popup_type_image-preview"),document.querySelector(".popup__figure-image")),p=document.querySelector(".popup__figure-caption"),f={formSelector:".popup__form",fieldsetSelector:".popup__fieldset",inputSelector:".popup__input",submitButtonSelector:".popup__submit-button",inactiveButtonClass:"popup__submit-button_inactive",inputErrorClass:"popup__input_type_error",errorClass:"popup__input-error_active"};function d(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var h=function(){function e(t,n,r,o){var i=this;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._text=t,this._imageLink=n,this._templateSelector=r,this._handleCardClick=o,this._likeCard=function(e){e.target.classList.toggle("card__like-button_active")},this._deleteCard=function(){i.imageElement.removeEventListener("click",i._handleCardClick),i.likeButtonElement.removeEventListener("click",i._likeCard),i.closeButtonElement.removeEventListener("click",i._deleteCard),i.cardNode.remove(),i.cardNode=null},this._createCardElement()}var t,n;return t=e,(n=[{key:"_getCardNode",value:function(){return document.querySelector(this._templateSelector).content.querySelector(".card").cloneNode(!0)}},{key:"_createCardElement",value:function(){this.cardNode=this._getCardNode(),this.imageElement=this.cardNode.querySelector(".card__image"),this.titleElement=this.cardNode.querySelector(".card__title"),this.likeButtonElement=this.cardNode.querySelector(".card__like-button"),this.closeButtonElement=this.cardNode.querySelector(".card__delete-button"),this.imageElement.src=this._imageLink,this.imageElement.alt=this._text,this.titleElement.textContent=this._text,this._setEventListeners()}},{key:"_setEventListeners",value:function(){this.imageElement.addEventListener("click",this._handleCardClick),this.likeButtonElement.addEventListener("click",this._likeCard),this.closeButtonElement.addEventListener("click",this._deleteCard)}},{key:"getElement",value:function(){return this.cardNode}}])&&d(t.prototype,n),e}();function _(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var m=function(){function e(t,n){var r=t.items,o=t.renderer;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._renderedItems=r,this._renderer=o,this._container=document.querySelector(n)}var t,n;return t=e,(n=[{key:"addItem",value:function(e){this._container.prepend(this._renderer(e))}},{key:"clear",value:function(){this._container.innerHTML=""}},{key:"renderItems",value:function(){var e=this;this.clear(),this._renderedItems.forEach((function(t){e.addItem(t)}))}}])&&_(t.prototype,n),e}();function y(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function v(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var b=function(){function e(t,n,r){var o=this;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),v(this,"_handleEscClose",(function(e){"Escape"===e.key&&o.close()})),v(this,"_handleOverlayClick",(function(e){e.target===e.currentTarget&&e.currentTarget.addEventListener("mouseup",(function(t){t.target===e.target&&o.close()}),{once:!0})})),this._popupElement=document.querySelector(t),this._popupOpenClass=n,this._popupCloseButtonSelector=r}var t,n;return t=e,(n=[{key:"open",value:function(){this._popupElement.addEventListener("mousedown",this._handleOverlayClick),document.addEventListener("keyup",this._handleEscClose),this._popupElement.classList.add(this._popupOpenClass)}},{key:"close",value:function(){this._popupElement.removeEventListener("mousedown",this._handleOverlayClick),document.removeEventListener("keyup",this._handleEscClose),this._popupElement.classList.remove(this._popupOpenClass)}},{key:"setEventListeners",value:function(){var e=this;this._popupElement.querySelector(this._popupCloseButtonSelector).addEventListener("click",(function(){e.close()}))}}])&&y(t.prototype,n),e}();function g(e){return g="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},g(e)}function E(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function k(){return k="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(e,t,n){var r=S(e,t);if(r){var o=Object.getOwnPropertyDescriptor(r,t);return o.get?o.get.call(arguments.length<3?e:n):o.value}},k.apply(this,arguments)}function S(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=C(e)););return e}function w(e,t){return w=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e},w(e,t)}function L(e,t){if(t&&("object"===g(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e)}function C(e){return C=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)},C(e)}var O=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&w(e,t)}(u,e);var t,n,r,o,i=(r=u,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=C(r);if(o){var n=C(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return L(this,e)});function u(e,t,n,r,o){var a;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,u),(a=i.call(this,e,t,n))._handleSubmitForm=o,a._form=a._popupElement.querySelector(r.formSelector),a._inputsList=Array.from(a._form.querySelectorAll(r.inputSelector)),a}return t=u,(n=[{key:"close",value:function(){this._form.reset(),k(C(u.prototype),"close",this).call(this)}},{key:"_getInputValues",value:function(){var e={};return this._inputsList.forEach((function(t){e[t.name]=t.value})),console.log(e),e}},{key:"setEventListeners",value:function(){var e=this;k(C(u.prototype),"setEventListeners",this).call(this),this._form.addEventListener("submit",(function(t){t.preventDefault(),e._handleSubmitForm(e._getInputValues()),e.close()}))}}])&&E(t.prototype,n),u}(b);function j(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var x=function(){function e(t){var n=t.nameSelector,r=t.jobSelector;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._nameElement=document.querySelector(n),this._jobElement=document.querySelector(r)}var t,n;return t=e,(n=[{key:"getUserInfo",value:function(){return{userName:this._nameElement.textContent,userJob:this._jobElement.textContent}}},{key:"setUserInfo",value:function(e,t){this._nameElement.textContent=e,this._jobElement.textContent=t}}])&&j(t.prototype,n),e}();function q(e){return q="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},q(e)}function I(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function P(){return P="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(e,t,n){var r=B(e,t);if(r){var o=Object.getOwnPropertyDescriptor(r,t);return o.get?o.get.call(arguments.length<3?e:n):o.value}},P.apply(this,arguments)}function B(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=T(e)););return e}function R(e,t){return R=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e},R(e,t)}function N(e,t){if(t&&("object"===q(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e)}function T(e){return T=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)},T(e)}var V=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&R(e,t)}(u,e);var t,n,r,o,i=(r=u,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=T(r);if(o){var n=T(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return N(this,e)});function u(e,t,n,r,o){var a;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,u),(a=i.call(this,e,t,n))._figureImageElement=r,a._figureCaptionElement=o,a}return t=u,(n=[{key:"open",value:function(e){var t=e.text,n=e.imageLink;this._figureImageElement.src=n,this._figureImageElement.alt=t,this._figureCaptionElement.textContent=t,P(T(u.prototype),"open",this).call(this)}}])&&I(t.prototype,n),u}(b),D=new x({nameSelector:".profile__name",jobSelector:".profile__about"}),A=new V(".popup_type_image-preview",r,n,s,p);A.setEventListeners();var U=new O(".popup_type_profile",r,n,f,(function(e){D.setUserInfo(e.name,e.about)}));U.setEventListeners();var M=new O(".popup_type_add-card",r,n,f,(function(e){F.addItem({text:e["card-title"],imageLink:e["card-image-link"]})}));M.setEventListeners();var F=new m({items:[{text:"Yosemite Valley",imageLink:"https://code.s3.yandex.net/web-code/yosemite.jpg"},{text:"Lake Louise",imageLink:"https://code.s3.yandex.net/web-code/lake-louise.jpg"},{text:"Bald Mountains",imageLink:"https://code.s3.yandex.net/web-code/bald-mountains.jpg"},{text:"Latemar",imageLink:"https://code.s3.yandex.net/web-code/latemar.jpg"},{text:"Vanoise National Park",imageLink:"https://code.s3.yandex.net/web-code/vanoise.jpg"},{text:"Lago di Braies",imageLink:"https://code.s3.yandex.net/web-code/lago.jpg"}],renderer:function(e){return t=e.text,n=e.imageLink,new h(t,n,"#card-template",(function(){A.open({text:t,imageLink:n})})).getElement();var t,n}},".cards");F.renderItems();var J=new t(f,c),H=new t(f,l);J.enableValidation(),H.enableValidation(),o.addEventListener("click",(function(){J.resetValidation();var e=D.getUserInfo();u.value=e.userName,a.value=e.userJob,U.open()})),i.addEventListener("click",(function(){H.resetValidation(),M.open()}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,